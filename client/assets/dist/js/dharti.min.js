/*
 dharti-api 2016-04-21 21:43 
*/

"use strict";

angular.element(document).ready(function() {
    "#_=_" === window.location.hash && (window.location.hash = "#!");
});

var modules = [ "ngCookies", "ngResource", "ui.bootstrap", "ngAnimate", "ui.router", "crossover.main", "ngMaterial", "crossover.dashboard", "ngCookies" ];

angular.module("crossover", modules), angular.module("crossover.main").config([ "$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.otherwise("/"), $stateProvider.state("home", {
        url: "/",
        templateUrl: "views/main.html",
        controller: "homeController"
    }).state("about", {
        url: "/about",
        templateUrl: "views/aboutUs.html",
        resolve: {}
    });
} ]).config([ "$locationProvider", function($locationProvider) {
    $locationProvider.hashPrefix("!");
} ]), angular.module("crossover-factory-interceptor", []).factory("httpInterceptor", [ "$q", "$location", function($q, $location) {
    return {
        response: function(response) {
            return 401 === response.status ? ($location.path("/auth/login"), $q.reject(response)) : response || $q.when(response);
        },
        responseError: function(rejection) {
            return 401 === rejection.status ? ($location.url("/auth/login"), $q.reject(rejection)) : $q.reject(rejection);
        }
    };
} ]).config([ "$httpProvider", function($httpProvider) {
    $httpProvider.interceptors.push("httpInterceptor");
} ]), angular.module("crossover.main").factory("homePageService", function($http, $cookieStore) {
    var initInjector = angular.injector([ "ng" ]), $q = initInjector.get("$q"), injector = angular.injector([ "crossover.utilities" ]), dataService = injector.get("data");
    return {
        registerOrLogin: function(username) {
            var deferred = $q.defer();
            return dataService.get("api/createuser", {
                username: username
            }, !1, !1).then(function(data) {
                deferred.resolve(data.data);
            }, function(err) {
                deferred.reject(err);
            }), deferred.promise;
        }
    };
}), angular.module("crossover.main").controller("homeController", [ "$scope", "$cookieStore", "$state", "$rootScope", "$window", "homePageService", function($scope, $cookieStore, $state, $rootScope, $window, homePageService) {
    $scope.loginOrRegister = function() {
        var cookie = [];
        $scope.userLoginForm.$valid ? homePageService.registerOrLogin($scope.username.trim()).then(function(data) {
            $rootScope.username = $scope.username.trim(), $state.go("dashboard"), cookie.username = $scope.username.trim(), 
            $cookieStore.put("username", cookie.username);
        }) : $scope.userFormSubmitted = !0;
    };
} ]), angular.module("crossover").controller("SuperMainController", [ "$scope", "$state", "$rootScope", "$cookieStore", "$location", "$window", function($scope, $state, $rootScope, $cookieStore, $location, $window) {
    $rootScope.statesRecord = [], $rootScope.$on("$stateChangeSuccess", function(ev, to, toParams, from, fromParams) {
        $rootScope.previousState = from.name, $rootScope.currentState = to.name, $rootScope.previousParams = fromParams, 
        $rootScope.currentParams = toParams, $rootScope.statesRecord.push({
            state: $rootScope.previousParams,
            params: $rootScope.previousParams
        }), console.log("Previous state:", $rootScope.previousState, $rootScope.previousParams), 
        console.log("Current state:", $rootScope.currentState, $rootScope.currentParams);
    }), $rootScope.signOut = function() {
        $rootScope.$broadcast("logout", null);
    }, $scope.goToLogin = function() {
        $state.go("auth.account.login");
    };
    var loadLoggedInUser = function() {};
    $rootScope.loggedInUser || (console.log("loggedInUser is empty loading user from backend : "), 
    loadLoggedInUser());
} ]), angular.module("crossover.utilities", []), angular.module("crossover.utilities").constant("settings", {
    translationFiles: {
        en: "en.json",
        de: "de.json",
        ru: "ru.json"
    }
}), angular.module("crossover.utilities").factory("dhartiUtilities", [ function() {
    return {
        name: "utilities"
    };
} ]), angular.module("crossover.utilities").factory("data", [ "settings", function(settings) {
    function getUser() {
        var currentUser = $cookieStore.get("user");
        return currentUser;
    }
    var initInjector = angular.injector([ "ng" ]), $http = initInjector.get("$http");
    initInjector.get("$q");
    initInjector = angular.injector([ "ngCookies" ]);
    var $cookieStore = initInjector.get("$cookieStore");
    return {
        get: function(url, dataToSend, tokenIncluded, userIdIncluded) {
            dataToSend = dataToSend || {};
            var user = getUser();
            return user || 1 != tokenIncluded && 1 != userIdIncluded ? (1 == tokenIncluded && (dataToSend.token = user.token), 
            1 == userIdIncluded && (dataToSend.userId = user.id)) : console.log("Couldn't get token"), 
            $http({
                method: "GET",
                url: url,
                params: dataToSend,
                headers: {
                    "Content-Type": "application/json"
                }
            });
        },
        "delete": function(url, dataToSend, tokenIncluded, userIdIncluded) {
            dataToSend = dataToSend || {};
            var user = getUser();
            return user || 1 != tokenIncluded && 1 != userIdIncluded ? (1 == tokenIncluded && (dataToSend.token = user.token), 
            1 == userIdIncluded && (dataToSend.userId = user.id), $http({
                method: "DELETE",
                url: url,
                params: dataToSend,
                headers: {
                    "Content-Type": "application/json"
                }
            })) : void console.log("Couldn't get token");
        },
        put: function(url, dataToSend, tokenIncluded, userIdIncluded) {
            dataToSend = dataToSend || {};
            var user = getUser();
            return user || 1 != tokenIncluded && 1 != userIdIncluded || console.log("Couldn't get token"), 
            1 == tokenIncluded && (dataToSend.token = user.token), 1 == userIdIncluded && (dataToSend.userId = user.id), 
            $http({
                method: "PUT",
                url: url,
                data: dataToSend,
                headers: {
                    "Content-Type": "application/json"
                }
            });
        },
        post: function(url, dataToSend, tokenIncluded, userIdIncluded) {
            dataToSend = dataToSend || {};
            var user = getUser();
            return user || 1 != tokenIncluded && 1 != userIdIncluded ? (1 == tokenIncluded && (dataToSend.token = user.token), 
            1 == userIdIncluded && (dataToSend.userId = user.id), $http({
                method: "POST",
                url: url,
                data: dataToSend
            })) : void console.log("Couldn't get token");
        }
    };
} ]), angular.module("crossover.utilities").factory("dhartiUtilities", [ function() {
    return {
        name: "utilities"
    };
} ]), angular.module("crossover.utilities").factory("geoLocation", [ "settings", function(settings) {
    var initInjector = angular.injector([ "ng" ]), $q = (initInjector.get("$http"), 
    initInjector.get("$q"));
    initInjector = angular.injector([ "ngCookies" ]);
    var $cookieStore = initInjector.get("$cookieStore");
    return {
        getLocation: function() {
            var deferred = $q.defer();
            return window.navigator && window.navigator.geolocation ? window.navigator.geolocation.getCurrentPosition(function(pos) {
                console.log("We got location:", pos), deferred.resolve(pos.coords);
            }, function(error) {
                switch (error.code) {
                  case error.PERMISSION_DENIED:
                    console.log("User denied the request for Geolocation."), $cookieStore.put("currentLocation", ""), 
                    deferred.reject("User denied the request for Geolocation.");
                    break;

                  case error.POSITION_UNAVAILABLE:
                    console.log("Location information is unavailable."), $cookieStore.put("currentLocation", ""), 
                    deferred.reject("Location information is unavailable.");
                    break;

                  case error.TIMEOUT:
                    console.log("The request to get user location timed out."), $cookieStore.put("currentLocation", ""), 
                    deferred.reject("The request to get user location timed out.");
                    break;

                  case error.UNKNOWN_ERROR:
                    console.log("An unknown error occurred."), $cookieStore.put("currentLocation", ""), 
                    deferred.reject("An unknown error occurred.");
                }
            }) : deferred.reject("Location Service not available"), deferred.promise;
        },
        getLocationCookie: function() {
            var temp = $cookieStore.get("currentLocation");
            return temp && "" != temp ? temp : null;
        },
        IsLocationCookieAvailable: function() {
            var temp = $cookieStore.get("currentLocation");
            return "" == temp;
        }
    };
} ]), angular.module("crossover.utilities").factory("localization", [ "settings", function(settings) {
    var initInjector = angular.injector([ "ng" ]), $http = initInjector.get("$http"), $q = initInjector.get("$q");
    initInjector = angular.injector([ "ngCookies" ]);
    initInjector.get("$cookieStore");
    return {
        getTranslations: function(lang) {
            console.log(lang, settings.translationFiles[lang]);
            var deferred = $q.defer();
            return settings.translationFiles[lang] || deferred.reject("Language not available"), 
            $http.get(settings.translationFiles[lang]).success(function(response) {
                deferred.resolve(response);
            }).error(function(response) {
                deferred.reject(response);
            }), deferred.promise;
        }
    };
} ]), angular.module("crossover.dashboard", []), angular.module("crossover.dashboard").controller("dashboardCtrl", [ "$scope", "$rootScope", "$http", "$location", "$cookieStore", "dashboardService", "$state", "$mdDialog", "$mdMedia", function($scope, $rootScope, $http, $location, $cookieStore, dashboardService, $state, $mdDialog, $mdMedia) {
    var username = $cookieStore.get("username");
    dashboardService.isLoggedIn() || $state.go("home"), dashboardService.getAllInventory(username).then(function(data) {
        $scope.inventoryList = data.data, $scope.$apply(), console.log($scope.inventoryList);
    }), $scope.startAuctionPopup = function(itemAmount, itemName) {
        $rootScope.currentAuctionAmount = itemAmount, $rootScope.currentAuctionName = itemName, 
        console.log("available: ", $scope.currentAuctionAmount);
        var useFullScreen = ($mdMedia("sm") || $mdMedia("xs")) && $scope.customFullscreen;
        $mdDialog.show({
            controller: "dashboardCtrl",
            templateUrl: "packages/dashboard/views/popups/auction.tmpl.html",
            parent: angular.element(document.body),
            clickOutsideToClose: !0,
            fullscreen: useFullScreen
        });
    }, $scope.startAuction = function() {
        var inputQty = $scope.quantity;
        $scope.isQtyExceed = !1, $scope.fieldsMissing = !1, $scope.startAuctionForm.$valid ? inputQty > $rootScope.currentAuctionAmount ? $scope.isQtyExceed = !0 : dashboardService.createAuction(username, $scope.minBid, $scope.quantity, $rootScope.currentAuctionName, $rootScope.currentAuctionName).then(function(data) {
            $mdDialog.hide();
            var match = (_.where($scope.inventoryList, {
                productName: $rootScope.currentAuctionName
            }), _.find($scope.inventoryList, function(item) {
                return item.productName === $rootScope.currentAuctionName;
            }));
            match && (match.quantity = $rootScope.currentAuctionAmount - $scope.quantity), console.log("****************: ", $scope.inventoryList), 
            $scope.$apply();
        }) : ($scope.fieldsMissing = !0, console.log("not valid form"));
    };
} ]), angular.module("crossover.dashboard").config([ "$stateProvider", function($stateProvider) {
    $stateProvider.state("dashboard", {
        url: "/dashboard",
        templateUrl: "packages/dashboard/views/index.html",
        controller: "dashboardCtrl",
        resolve: {}
    });
} ]), angular.module("crossover.dashboard").factory("dashboardService", function($http, $cookieStore) {
    var initInjector = angular.injector([ "ng" ]), $q = initInjector.get("$q"), injector = angular.injector([ "crossover.utilities" ]), dataService = injector.get("data");
    return {
        isLoggedIn: function() {
            var username = $cookieStore.get("username");
            return !!username;
        },
        getAllInventory: function(username) {
            var deferred = $q.defer();
            return dataService.get("api/getinventory", {
                username: username
            }, !1, !1).then(function(data) {
                deferred.resolve(data.data);
            }, function(err) {
                deferred.reject(err);
            }), deferred.promise;
        },
        createAuction: function(username, minBid, qty, itemType, itemName) {
            var deferred = $q.defer();
            return dataService.get("api/createauction", {
                username: username,
                itemType: itemType,
                itemName: itemName,
                itemQty: qty,
                minBid: minBid
            }, !1, !1).then(function(data) {
                deferred.resolve(data.data);
            }, function(err) {
                deferred.reject(err);
            }), deferred.promise;
        }
    };
});
//# sourceMappingURL=../../../../sourceMap.map